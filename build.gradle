import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
buildscript {
    dependencies {
        classpath ('org.eclipse.jgit:org.eclipse.jgit:') {
            version {
                strictly '5.13.0.202109080827-r'
            }
        }
    }
}
plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.1.0'
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

repositories {
    mavenCentral()
}

def integrationTest = sourceSets.create("integrationTest")

dependencies {
    shadow gradleApi()
    shadow localGroovy()
    implementation('org.ajoberstar.grgit:grgit-core:4.1.1') {
        exclude(group: 'org.slf4j')
    }
    // for debugging
    //implementation 'org.gradle:gradle-language-jvm:5.6.2'
    //implementation 'org.gradle:gradle-language-java:5.6.2'


    testImplementation 'junit:junit:4.13.1'
    testImplementation gradleTestKit()

    integrationTestImplementation 'junit:junit:4.13.1'
    integrationTestImplementation gradleTestKit()
    integrationTestImplementation project
    integrationTestImplementation sourceSets.test.output // Include test files for git project utils
}

tasks.register('relocateShadowJar', ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "gradlegitproperties"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

shadowJar {
    archiveClassifier.set('')
}

tasks.shadowJar.dependsOn tasks.jar

components.java.withVariantsFromConfiguration(configurations.runtimeElements) {
    skip()
}

version = "2.5.0"
group = "de.sharpmind"

tasks.withType(GroovyCompile).configureEach {
    targetCompatibility = JavaVersion.VERSION_1_8
}
test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

test.onlyIf { project.hasProperty('performTests') }

/*tasks.register("integrationTest", Test) {
    //dependsOn tasks.shadowJar

    description = 'Runs the integration tests.'
    group = "verification"
    testClassesDirs = integrationTest.output.classesDirs
    classpath = integrationTest.runtimeClasspath
    it.systemProperty "integration.plugin.path", tasks.shadowJar.outputs.getFiles().asPath // Pass java system property indicating integration plugin path
}*/

tasks.register("sourcesJar", Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.resources, sourceSets.main.groovy

    dependsOn tasks.named("classes")
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

gradlePlugin {
    website = 'https://github.com/sharpmind-de/gradle-git-properties'
    vcsUrl = 'https://github.com/sharpmind-de/gradle-git-properties.git'

    plugins {
        gitPropertiesPlugin {
            id = 'de.sharpmind.gradle-git-properties'
            displayName = 'Gradle Git Properties plugin'
            description = 'Produce git.properties'
            implementationClass = 'com.gorylenko.GitPropertiesPlugin'
            tags.addAll('git', 'properties', 'version')
        }
    }
}
